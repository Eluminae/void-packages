diff --git examples/make-x509-certreqs examples/make-x509-certreqs
index 03de8e0..086eaf5 100644
--- examples/make-x509-certreqs
+++ examples/make-x509-certreqs
@@ -73,12 +73,12 @@ gencertreq() {
     # directly.  See https://dev.gnupg.org/T4503 for why we need to
     # use OpenSSL for now.
 
-    local timestamp=$(gpg --fixed-list-mode --with-colons --list-keys "0x$keyid!" | awk -F: '/^pub:/{ print $6 }')
-    local keygrip=$(gpg --fixed-list-mode --with-keygrip --with-colons --list-keys "0x$keyid!" | awk -F: '/^grp:/{ print $10 }')
+    local timestamp=$(gpg2 --fixed-list-mode --with-colons --list-keys "0x$keyid!" | awk -F: '/^pub:/{ print $6 }')
+    local keygrip=$(gpg2 --fixed-list-mode --with-keygrip --with-colons --list-keys "0x$keyid!" | awk -F: '/^grp:/{ print $10 }')
     
     local primary
 # find all the $proto-using User IDs:
-    local uids=$(gpg --fixed-list-mode --with-colons --list-keys \&"$keygrip" | \
+    local uids=$(gpg2 --fixed-list-mode --with-colons --list-keys \&"$keygrip" | \
         grep '^uid:' | cut -f10 -d: | \
         grep '^'"${proto}"'\\x3a//' | \
         sed -r -e 's!^'"${proto}"'\\x3a//!!' -e 's!:[0-9]+$!!')
@@ -109,6 +109,6 @@ export GNUPGHOME=/var/lib/monkeysphere/host
 # default to looking for https keys.
 proto="${1:-https}"
 
-for fpr in $(gpg --fixed-list-mode --with-colons --fingerprint --list-secret-keys "${proto}://" | awk -F: '/^fpr:/{ if (ok) { print $10 } ; ok=0 } /^sec:/{ ok=1 }'); do
+for fpr in $(gpg2 --fixed-list-mode --with-colons --fingerprint --list-secret-keys "${proto}://" | awk -F: '/^fpr:/{ if (ok) { print $10 } ; ok=0 } /^sec:/{ ok=1 }'); do
     gencertreq "$fpr"
 done
diff --git examples/monkeysphere-monitor-keys examples/monkeysphere-monitor-keys
index c5d0a0f..a2de59e 100755
--- examples/monkeysphere-monitor-keys
+++ examples/monkeysphere-monitor-keys
@@ -31,7 +31,7 @@
 
 # FIXME: does this handle revocations and re-keying?  if a sysadmin
 # switches over to this arrangement, how will the system check for
-# revocations?  Scheduling a simple gpg --refresh should handle
+# revocations?  Scheduling a simple gpg2 --refresh should handle
 # revocations.  I'm not sure how to best handle re-keyings.
 
 use strict;
diff --git src/agent-transfer/main.c src/agent-transfer/main.c
index 65b8870..a400ffe 100644
--- src/agent-transfer/main.c
+++ src/agent-transfer/main.c
@@ -575,7 +575,7 @@ void usage (FILE *f) {
            "and sends it to the running SSH agent.\n"
            "\n"
            "  KEYGRIP should be a GnuPG keygrip\n"
-           "    (e.g. try \"gpg --with-keygrip --list-secret-keys\")\n"
+           "    (e.g. try \"gpg2 --with-keygrip --list-secret-keys\")\n"
            "  COMMENT (optional) can be any string\n"
            "    (must not start with a \"-\")\n"
            "\n"
diff --git src/monkeysphere src/monkeysphere
index 7c79712..f08a613 100755
--- src/monkeysphere
+++ src/monkeysphere
@@ -62,7 +62,7 @@ EOF
 
 # user gpg command to define common options
 gpg_user() {
-    LC_ALL=C "${GPG:-gpg}" --fixed-list-mode --no-greeting --quiet --no-tty "$@"
+    LC_ALL=C "${GPG:-gpg2}" --fixed-list-mode --no-greeting --quiet --no-tty "$@"
 }
 
 # output the ssh fingerprint of a gpg key
@@ -92,7 +92,7 @@ check_gpg_sec_key_id() {
     case $(echo "$gpgSecOut" | grep -c '^sec:') in
 	0)
 	    failure "No secret keys found.  Create an OpenPGP key with the following command:
- gpg --gen-key"
+ gpg2 --gen-key"
 	    ;;
 	1)
 	    echo "$gpgSecOut" | cut -d: -f5
diff --git src/monkeysphere-authentication src/monkeysphere-authentication
index 1d877e9..b56a5c9 100755
--- src/monkeysphere-authentication
+++ src/monkeysphere-authentication
@@ -73,7 +73,7 @@ gpg_core() {
     GNUPGHOME="$GNUPGHOME_CORE"
     export GNUPGHOME
 
-    gpg --fixed-list-mode --no-greeting --quiet --no-tty "$@"
+    gpg2 --fixed-list-mode --no-greeting --quiet --no-tty "$@"
 }
 
 # function to interact with the gpg sphere keyring
@@ -81,7 +81,7 @@ gpg_sphere() {
     GNUPGHOME="$GNUPGHOME_SPHERE"
     export GNUPGHOME
  
-    run_as_monkeysphere_user gpg --fixed-list-mode --no-greeting --quiet --no-tty "$@"
+    run_as_monkeysphere_user gpg2 --fixed-list-mode --no-greeting --quiet --no-tty "$@"
 }
 
 # output to stdout the core fingerprint from the gpg core secret
diff --git src/monkeysphere-host src/monkeysphere-host
index 40e8cc0..8de674d 100755
--- src/monkeysphere-host
+++ src/monkeysphere-host
@@ -80,7 +80,7 @@ EOF
 
 # function to interact with the gpg keyring
 gpg_host() {
-    GNUPGHOME="$GNUPGHOME_HOST" LC_ALL=C gpg --no-auto-check-trustdb --trust-model=always --no-greeting --quiet --no-tty --fixed-list-mode "$@"
+    GNUPGHOME="$GNUPGHOME_HOST" LC_ALL=C gpg2 --no-auto-check-trustdb --trust-model=always --no-greeting --quiet --no-tty --fixed-list-mode "$@"
 }
 
 # list the info about the a key, in colon format, to stdout
@@ -310,10 +310,10 @@ show_key() {
     trap cleanup EXIT
 
     # import the host key into the tmp dir
-    gpg --quiet --import <"$HOST_KEY_FILE"
+    gpg2 --quiet --import <"$HOST_KEY_FILE"
 
     # get the gpg fingerprint
-    if gpg --quiet --list-keys \
+    if gpg2 --quiet --list-keys \
 	--with-colons --with-fingerprint "$id" \
 	| awk -F: '/^fpr:/{ if (ok) { print $10 } ; ok=0 } /^pub:/{ ok=1 }' > "$GNUPGHOME"/fingerprint ; then
 	fingerprint=$(cat "$GNUPGHOME"/fingerprint)
@@ -324,13 +324,13 @@ show_key() {
     # list the host key info
     # FIXME: make no-show-keyring work so we don't have to do the grep'ing
     # FIXME: can we show uid validity somehow?
-    gpg --list-keys --list-options show-unusable-uids "$fingerprint" 2>/dev/null \
+    gpg2 --list-keys --list-options show-unusable-uids "$fingerprint" 2>/dev/null \
         | egrep -v "^${GNUPGHOME}/pubring.(gpg|kbx)$" \
         | egrep -v '^-+$' \
         | grep -v '^$'
 
     # list revokers, if there are any
-    revokers=$(gpg --list-keys --with-colons --fixed-list-mode "$fingerprint" \
+    revokers=$(gpg2 --list-keys --with-colons --fixed-list-mode "$fingerprint" \
 	| awk -F: '/^rvk:/{ print $10 }' )
     if [ "$revokers" ] ; then
 	echo "The following keys are allowed to revoke this host key:"
@@ -344,7 +344,7 @@ show_key() {
 
     # list the ssh fingerprint
     printf "ssh fingerprint: %s\n" \
-    "$(gpg --export-ssh-key "0x${fingerprint}!" 2>/dev/null | cut -f1,2 -d' ' | sed 's/$/ ./' | ssh-keygen -l -f -)"
+    "$(gpg2 --export-ssh-key "0x${fingerprint}!" 2>/dev/null | cut -f1,2 -d' ' | sed 's/$/ ./' | ssh-keygen -l -f -)"
 
     # remove the tmp file
     trap - EXIT
diff --git src/share/common src/share/common
index 1b3a47b..227c509 100644
--- src/share/common
+++ src/share/common
@@ -526,7 +526,7 @@ gpg2ssh() {
     
     keyID="$1"
 
-    gpg --export-ssh-key "0x${keyID}!" 2>/dev/null | cut -f1,2 -d' '
+    gpg2 --export-ssh-key "0x${keyID}!" 2>/dev/null | cut -f1,2 -d' '
 }
 
 # output known_hosts line from ssh key
@@ -632,7 +632,7 @@ gpg2authorized_keys() {
 
 # script to determine if gpg version is equal to or greater than specified version
 is_gpg_version_greater_equal() {
-    local gpgVersion=$(gpg --version | head -1 | awk '{ print $3 }')
+    local gpgVersion=$(gpg2 --version | head -1 | awk '{ print $3 }')
     local latest=$(printf '%s\n%s\n' "$1" "$gpgVersion" \
 	| tr '.' ' ' | sort -g -k1 -k2 -k3 \
 	| tail -1 | tr ' ' '.')
@@ -653,7 +653,7 @@ gpg_fetch_userid() {
 
     log verbose " checking keyserver $KEYSERVER... "
     foundkeyids="$(echo | \
-	gpg --quiet --batch --with-colons \
+	gpg2 --quiet --batch --with-colons \
 	--command-fd 0 --keyserver "$KEYSERVER" \
 	--search ="$userID" 2>/dev/null)"
     returnCode="$?"
@@ -668,7 +668,7 @@ $foundkeyids
         foundkeyids="$(printf "%s" "$foundkeyids" | grep '^pub:' | cut -f2 -d: | sed 's/^/0x/')"
         log verbose " Found keyids on keyserver: $(printf "%s" "$foundkeyids" | tr '\n' ' ')"
         if [ -n "$foundkeyids" ]; then
-            echo | gpg --quiet --batch --with-colons \
+            echo | gpg2 --quiet --batch --with-colons \
                 --command-fd 0 --keyserver "$KEYSERVER" \
                 --recv-keys $foundkeyids &>/dev/null
             returnCode="$?"
@@ -724,7 +724,7 @@ process_user_id() {
     gpg_fetch_userid "$userID"
 
     # output gpg info for (exact) userid and store
-    gpgOut=$(gpg --list-key --fixed-list-mode --with-colons \
+    gpgOut=$(gpg2 --list-key --fixed-list-mode --with-colons \
 	--with-fingerprint --with-fingerprint \
 	="$userID" 2>/dev/null) || returnCode="$?"
 
@@ -993,8 +993,8 @@ list_primary_fingerprints() {
         rm -rf "$fake"
     }
     trap cleanup EXIT
-    GNUPGHOME="$fake" gpg --no-tty --quiet --import --ignore-time-conflict 2>/dev/null
-    GNUPGHOME="$fake" gpg --with-colons --fingerprint --list-keys | \
+    GNUPGHOME="$fake" gpg2 --no-tty --quiet --import --ignore-time-conflict 2>/dev/null
+    GNUPGHOME="$fake" gpg2 --with-colons --fingerprint --list-keys | \
 	awk -F: '/^fpr:/{ if (ok) { print $10 } ; ok=0 } /^pub:/{ ok=1 }'
     trap - EXIT
     cleanup
@@ -1012,8 +1012,8 @@ get_cert_info() {
         fi
         rm -rf "$fake"
     }
-    GNUPGHOME="$fake" gpg --no-tty --quiet --import --ignore-time-conflict 2>/dev/null
-    GNUPGHOME="$fake" gpg --with-colons --fingerprint --fixed-list-mode --list-keys "$1"
+    GNUPGHOME="$fake" gpg2 --no-tty --quiet --import --ignore-time-conflict 2>/dev/null
+    GNUPGHOME="$fake" gpg2 --with-colons --fingerprint --fixed-list-mode --list-keys "$1"
     trap - EXIT
     cleanup
 }
diff --git src/share/keytrans src/share/keytrans
index 1376521..943970c 100755
--- src/share/keytrans
+++ src/share/keytrans
@@ -20,7 +20,7 @@
 
 # Usage:
 
-# pem2openpgp 'ssh://'$(hostname -f) < /etc/ssh/ssh_host_rsa_key | gpg --import
+# pem2openpgp 'ssh://'$(hostname -f) < /etc/ssh/ssh_host_rsa_key | gpg2 --import
 
 
 
@@ -35,7 +35,7 @@
 
 # Example usage:
 
-# gpg --export-secret-subkeys --export-options export-reset-subkey-passwd $KEYID | \
+# gpg2 --export-secret-subkeys --export-options export-reset-subkey-passwd $KEYID | \
 #  openpgp2ssh $KEYID | ssh-add -
 
 
diff --git src/share/m/ssh_proxycommand src/share/m/ssh_proxycommand
index e0a17b9..830fe13 100644
--- src/share/m/ssh_proxycommand
+++ src/share/m/ssh_proxycommand
@@ -301,7 +301,7 @@ EOF
 
 	log info <<EOF
 Run the following command for more info about the found keys:
-gpg --check-sigs --list-options show-uid-validity =${userID}
+gpg2 --check-sigs --list-options show-uid-validity =${userID}
 EOF
 
 	# FIXME: should we do anything extra here if the retrieved
diff --git src/share/m/subkey_to_ssh_agent src/share/m/subkey_to_ssh_agent
index 0738bcf..ad5ff2b 100644
--- src/share/m/subkey_to_ssh_agent
+++ src/share/m/subkey_to_ssh_agent
@@ -54,7 +54,7 @@ subkey_to_ssh_agent() {
 
 	if [ -z "$secretkeys" ]; then
 	    failure "You have no secret keys in your keyring!
-You might want to run 'gpg --gen-key'."
+You might want to run 'gpg2 --gen-key'."
 	fi
 
         # $2 regex means "is some kind of valid, or at least not invalid"
diff --git src/share/mh/add_revoker src/share/mh/add_revoker
index 02654d7..92d9c8a 100644
--- src/share/mh/add_revoker
+++ src/share/mh/add_revoker
@@ -72,12 +72,12 @@ if [ -f "$revokerKeyID" -o "$revokerKeyID" = '-' ] ; then
 else
     # download the key from the keyserver as the monkeysphere user
     log verbose "searching keyserver $KEYSERVER for revoker keyID $revokerKeyID..."
-    run_as_monkeysphere_user env GNUPGHOME="$tmpDir" gpg --quiet --keyserver "$KEYSERVER" --recv-key "0x${revokerKeyID}!" \
+    run_as_monkeysphere_user env GNUPGHOME="$tmpDir" gpg2 --quiet --keyserver "$KEYSERVER" --recv-key "0x${revokerKeyID}!" \
 	|| failure "Could not receive a key with this ID from keyserver '$KEYSERVER'."
 
     # get the full fingerprint of new revoker key
     log debug "getting fingerprint of revoker key..."
-    fingerprint=$(run_as_monkeysphere_user env GNUPGHOME="$tmpDir" gpg --list-key --with-colons --with-fingerprint "${revokerKeyID}" \
+    fingerprint=$(run_as_monkeysphere_user env GNUPGHOME="$tmpDir" gpg2 --list-key --with-colons --with-fingerprint "${revokerKeyID}" \
 	| awk -F: '/^fpr:/{ if (ok) { print $10 }; ok=0 } /^pub:/{ ok=1 }')
 
     # test that there is only a single fingerprint
@@ -91,7 +91,7 @@ EOF
     fi
 
     log info "revoker key found:"
-    run_as_monkeysphere_user env GNUPGHOME="$tmpDir" gpg --fingerprint "0x${fingerprint}!"
+    run_as_monkeysphere_user env GNUPGHOME="$tmpDir" gpg2 --fingerprint "0x${fingerprint}!"
 
     if [ "$PROMPT" = "true" ] ; then
 	printf "Are you sure you want to add the above key as a revoker\nof the key '$keyID'? (Y/n) " >&2
@@ -105,7 +105,7 @@ EOF
 
     # export the new key to the host keyring
     log debug "loading revoker key into host keyring..."
-    run_as_monkeysphere_user env GNUPGHOME="$tmpDir" gpg --quiet --export "0x${fingerprint}!" \
+    run_as_monkeysphere_user env GNUPGHOME="$tmpDir" gpg2 --quiet --export "0x${fingerprint}!" \
 	| gpg_host --import
 fi
 
diff --git src/share/mh/publish_key src/share/mh/publish_key
index 23a763d..8a8f393 100644
--- src/share/mh/publish_key
+++ src/share/mh/publish_key
@@ -47,7 +47,7 @@ trap cleanup EXIT
 
 # import the key into the tmp dir
 run_as_monkeysphere_user \
-    gpg --quiet --import <"$HOST_KEY_FILE"
+    gpg2 --quiet --import <"$HOST_KEY_FILE"
 
 ANCHORFILE=""
 for anchorfile in "${SYSCONFIGDIR}/monkeysphere-host-x509-anchors.crt" "${SYSCONFIGDIR}/monkeysphere-x509-anchors.crt"; do
@@ -60,7 +60,7 @@ done
 # publish key
 log debug "publishing key with the following gpg command line and options:"
 run_as_monkeysphere_user \
-    gpg --keyserver "$KEYSERVER" ${ANCHORFILE:+--keyserver-options "ca-cert-file=$ANCHORFILE"} --send-keys "0x${keyID}!"
+    gpg2 --keyserver "$KEYSERVER" ${ANCHORFILE:+--keyserver-options "ca-cert-file=$ANCHORFILE"} --send-keys "0x${keyID}!"
 
 # remove the tmp file
 trap - EXIT
diff --git src/share/mh/revoke_key src/share/mh/revoke_key
index 45f7b52..57ffa28 100644
--- src/share/mh/revoke_key
+++ src/share/mh/revoke_key
@@ -72,11 +72,11 @@ y
     else
     # note: we're not using the gpg_host function because we actually
     # want to use gpg's UI in this case, so we want to omit --no-tty
-	revcert=$(GNUPGHOME="$GNUPGHOME_HOST" gpg --no-greeting --quiet --armor --gen-revoke "0x${keyID}!") \
+	revcert=$(GNUPGHOME="$GNUPGHOME_HOST" gpg2 --no-greeting --quiet --armor --gen-revoke "0x${keyID}!") \
 	    || failure "Failed to generate revocation certificate!"
     fi
 
-    # if you run gpg --gen-revoke but cancel it or quit in the middle,
+    # if you run gpg2 --gen-revoke but cancel it or quit in the middle,
     # it returns success, but emits no revocation certificate:
     if ! [ "$revcert" ] ; then
 	failure "Revocation canceled."
@@ -94,9 +94,9 @@ y
 	    printf "Not publishing.\n" >&2
 	else
 	    local newhome=$(msmktempdir)
-	    GNUPGHOME="$newhome" gpg --no-tty --quiet --import < "$HOST_KEY_FILE"
-	    GNUPGHOME="$newhome" gpg --no-tty --quiet --import <<< "$revcert"
-	    GNUPGHOME="$newhome" gpg --keyserver "$KEYSERVER" --send-keys "0x${keyID}!"
+	    GNUPGHOME="$newhome" gpg2 --no-tty --quiet --import < "$HOST_KEY_FILE"
+	    GNUPGHOME="$newhome" gpg2 --no-tty --quiet --import <<< "$revcert"
+	    GNUPGHOME="$newhome" gpg2 --keyserver "$KEYSERVER" --send-keys "0x${keyID}!"
 	    rm -rf "$newhome"
 	fi
     fi
diff --git src/transitions/0.23 src/transitions/0.23
index 82529f2..f6add35 100755
--- src/transitions/0.23
+++ src/transitions/0.23
@@ -72,7 +72,7 @@ if [ -d "$SYSDATADIR"/gnupg-host ] ; then
 	# get the old host keygrip (don't know why there would be more
 	# than one, but we'll transfer all tsigs made by any key that
 	# had been given ultimate ownertrust):
-	for authgrip in $(GNUPGHOME="$SYSDATADIR"/gnupg-host gpg --quiet --no-tty --no-permission-warning --export-ownertrust | \
+	for authgrip in $(GNUPGHOME="$SYSDATADIR"/gnupg-host gpg2 --quiet --no-tty --no-permission-warning --export-ownertrust | \
 	    grep ':6:$' | \
 	    sed -r 's/^[A-F0-9]{24}([A-F0-9]{16}):6:$/\1/') ; do
 	    
@@ -88,7 +88,7 @@ if [ -d "$SYSDATADIR"/gnupg-host ] ; then
 	    # one of those certifications (even if later
 	    # certifications had different parameters).
 	    
-	    GNUPGHOME="$SYSDATADIR"/gnupg-host gpg --quiet --no-tty --no-permission-warning --fingerprint --with-colons --fixed-list-mode --check-sigs | \
+	    GNUPGHOME="$SYSDATADIR"/gnupg-host gpg2 --quiet --no-tty --no-permission-warning --fingerprint --with-colons --fixed-list-mode --check-sigs | \
 		cut -f 1,2,5,8,9,10 -d: | \
 		egrep '^(fpr:::::|sig:!:'"$authgrip"':[[:digit:]]+ [[:digit:]]+:)' | \
 		while IFS=: read -r type validity grip trustparams trustdomain fpr ; do
@@ -130,7 +130,7 @@ if [ -d "$SYSDATADIR"/gnupg-host ] ; then
 
 			    CERTKEY=$(mktemp ${TMPDIR:-/tmp}/mstransition.XXXXXXXX)
 			    log "Adding identity certifier with fingerprint %s\n" "$keyfpr"
-			    GNUPGHOME="$SYSDATADIR"/gnupg-host gpg --quiet --no-tty --no-permission-warning --export "0x$keyfpr" --export-options export-clean >"$CERTKEY"
+			    GNUPGHOME="$SYSDATADIR"/gnupg-host gpg2 --quiet --no-tty --no-permission-warning --export "0x$keyfpr" --export-options export-clean >"$CERTKEY"
 			    MONKEYSPHERE_PROMPT=false monkeysphere-authentication add-identity-certifier $finaldomain --trust "$truststring" --depth "$trustdepth" "$CERTKEY"
 			    rm -f "$CERTKEY"
 			    # clear the fingerprint so that we don't
@@ -150,9 +150,9 @@ if [ -d "$SYSDATADIR"/gnupg-host ] ; then
 	log "Not transferring host key info because host directory already exists.\n"
     else
 	if [ -s "$SYSDATADIR"/ssh_host_rsa_key ] || \
-	    GNUPGHOME="$SYSDATADIR"/gnupg-host gpg --quiet --no-tty --no-permission-warning --with-colons --list-secret-keys | grep -q '^sec:' ; then
+	    GNUPGHOME="$SYSDATADIR"/gnupg-host gpg2 --quiet --no-tty --no-permission-warning --with-colons --list-secret-keys | grep -q '^sec:' ; then
 	    
-	    FPR=$(GNUPGHOME="$SYSDATADIR"/gnupg-host gpg --quiet --no-tty --no-permission-warning --with-colons --fixed-list-mode --list-secret-keys --fingerprint | awk -F: '/^fpr:/{ print $10 }' )
+	    FPR=$(GNUPGHOME="$SYSDATADIR"/gnupg-host gpg2 --quiet --no-tty --no-permission-warning --with-colons --fixed-list-mode --list-secret-keys --fingerprint | awk -F: '/^fpr:/{ print $10 }' )
 	    
 	# create host home
 	    mkdir -p $(dirname "$MHDATADIR")
@@ -169,12 +169,12 @@ if [ -d "$SYSDATADIR"/gnupg-host ] ; then
 # FIXME: if all self-sigs are expired, then the secret key import may
 # fail anyway. How should we deal with that?
 	    
-	    if (GNUPGHOME="$SYSDATADIR"/gnupg-host gpg --quiet --no-tty --no-permission-warning --export-secret-keys && \
-		GNUPGHOME="$SYSDATADIR"/gnupg-host gpg --quiet --no-tty --no-permission-warning --export "$FPR") | \
-		GNUPGHOME="$NEWDATADIR" gpg --quiet --no-tty --import ; then
+	    if (GNUPGHOME="$SYSDATADIR"/gnupg-host gpg2 --quiet --no-tty --no-permission-warning --export-secret-keys && \
+		GNUPGHOME="$SYSDATADIR"/gnupg-host gpg2 --quiet --no-tty --no-permission-warning --export "$FPR") | \
+		GNUPGHOME="$NEWDATADIR" gpg2 --quiet --no-tty --import ; then
 		: we are in good shape!
 	    else
-		if ! GNUPGHOME="$NEWDATADIR" gpg --quiet --no-tty --list-secret-key >/dev/null ; then
+		if ! GNUPGHOME="$NEWDATADIR" gpg2 --quiet --no-tty --list-secret-key >/dev/null ; then
 		    log "The old host key (%s) was not imported properly.\n" "$FPR"
 		    exit 1
 		fi
@@ -204,7 +204,7 @@ fi
 if [ -d "${SYSDATADIR}/gnupg-authentication" ] ; then
 
     GNUPGHOME="${SYSDATADIR}/gnupg-authentication" \
-	gpg --quiet --no-tty --no-permission-warning --export 2>/dev/null | \
+	gpg2 --quiet --no-tty --no-permission-warning --export 2>/dev/null | \
 	monkeysphere-authentication gpg-cmd --import 2>/dev/null || \
 	log "No OpenPGP certificates imported into monkeysphere-authentication trust sphere.\n"
 
diff --git tests/basic tests/basic
index a993778..d5b54a8 100755
--- tests/basic
+++ tests/basic
@@ -40,7 +40,7 @@ which socat >/dev/null || { echo "You must have socat installed to run this test
 # gpg command for test admin user
 gpgadmin() {
     chmod 0700 "$TEMPDIR"/admin "$TEMPDIR"/admin/.gnupg
-    GNUPGHOME="$TEMPDIR"/admin/.gnupg gpg --no-tty "$@"
+    GNUPGHOME="$TEMPDIR"/admin/.gnupg gpg2 --no-tty "$@"
 }
 
 # test ssh connection
@@ -228,9 +228,9 @@ list-options show-uid-validity
 EOF
 get_gpg_prng_arg >> "$GNUPGHOME"/gpg.conf
 echo pinentry-program "$TESTDIR"/phony-pinentry >> "$GNUPGHOME/gpg-agent.conf"
-gpg --import < "$TESTDIR"/home-setup/testuser/secret_keyring.keys
-gpg --import-options import-local --import < "$TESTDIR"/home-setup/testuser/public_keyring.keys
-gpg --import-ownertrust < "$TESTDIR"/home-setup/testuser/ownertrustdb.txt
+gpg2 --import < "$TESTDIR"/home-setup/testuser/secret_keyring.keys
+gpg2 --import-options import-local --import < "$TESTDIR"/home-setup/testuser/public_keyring.keys
+gpg2 --import-ownertrust < "$TESTDIR"/home-setup/testuser/ownertrustdb.txt
 
 echo
 echo "##################################################"
@@ -340,7 +340,7 @@ if [ "$MONKEYSPHERE_TEST_USE_ED25519" = true ]; then
     echo "### generating ed25519 key for testuser..."
     # from the imported secret key
     USER_FPR=8A4B353B4CBA6F30625498BAE00B5EEEBA79B482
-    gpg --batch --no-tty --quick-add-key "$USER_FPR" ed25519 auth 2d
+    gpg2 --batch --no-tty --quick-add-key "$USER_FPR" ed25519 auth 2d
 else
     echo "### generating standard monkeysphere key for testuser..."
     monkeysphere gen-subkey
@@ -350,13 +350,13 @@ fi
 echo
 echo "##################################################"
 echo "### export server key to testuser..."
-gpgadmin --armor --export "$SSHHOSTKEYID" | gpg --import
+gpgadmin --armor --export "$SSHHOSTKEYID" | gpg2 --import
 
 # teach the "server" about the testuser's key
 echo
 echo "##################################################"
 echo "### export testuser key to server..."
-gpg --export testuser | monkeysphere-authentication gpg-cmd --import
+gpg2 --export testuser | monkeysphere-authentication gpg-cmd --import
 
 # update authorized_keys for user
 echo
@@ -569,23 +569,23 @@ printf "y\ny\n" | gpgadmin --command-fd 0 --sign-key "$SSHHOSTKEYID"
 echo
 echo "##################################################"
 echo "### ssh connection test with hostname 'testhost2.example' added..."
-gpgadmin --export "$SSHHOSTKEYID" | gpg --import
-gpg --check-trustdb
+gpgadmin --export "$SSHHOSTKEYID" | gpg2 --import
+gpg2 --check-trustdb
 ssh_test true
 
 echo
 echo "##################################################"
 echo "### ssh connection test directly to 'testhost2.example' ..."
-gpg --import <"$HOST_KEY_FILE"
-gpg --check-trustdb
+gpg2 --import <"$HOST_KEY_FILE"
+gpg2 --check-trustdb
 target_hostname=testhost2.example ssh_test true
 
 echo
 echo "##################################################"
 echo "### ssh connection test for failure with 'testhost2.example' revoked..."
 monkeysphere-host revoke-servicename ssh://testhost2.example
-gpg --import <"$HOST_KEY_FILE"
-gpg --check-trustdb
+gpg2 --import <"$HOST_KEY_FILE"
+gpg2 --check-trustdb
 target_hostname=testhost2.example ssh_test true 255
 
 # FIXME: addtest: remove admin as id-certifier and check ssh failure
@@ -626,7 +626,7 @@ echo "##################################################"
 echo "### revoking ssh host key..."
 # generate the revocation certificate and feed it directly to the test
 # user's keyring (we're not publishing to the keyservers)
-monkeysphere-host revoke-key "$SSHHOSTKEYID" | gpg --import
+monkeysphere-host revoke-key "$SSHHOSTKEYID" | gpg2 --import
 echo
 echo "##################################################"
 echo "### ssh connection test for failure..."
diff --git tests/common tests/common
index 0fc6c19..844edb2 100644
--- tests/common
+++ tests/common
@@ -17,9 +17,9 @@ failed_cleanup() {
 }
 
 get_gpg_prng_arg() {
-    if (gpg --quick-random --version >/dev/null 2>&1) ; then
+    if (gpg2 --quick-random --version >/dev/null 2>&1) ; then
 	echo quick-random
-    elif (gpg --debug-quick-random --version >/dev/null 2>&1) ; then
+    elif (gpg2 --debug-quick-random --version >/dev/null 2>&1) ; then
 	echo debug-quick-random
     fi
 }
diff --git tests/home-setup/admin/ownertrustdb.txt tests/home-setup/admin/ownertrustdb.txt
index 60debd6..1e442af 100644
--- tests/home-setup/admin/ownertrustdb.txt
+++ tests/home-setup/admin/ownertrustdb.txt
@@ -1,3 +1,3 @@
 # List of assigned trustvalues, created Fri 17 Jun 2016 02:45:59 AM EDT
-# (Use "gpg --import-ownertrust" to restore them)
+# (Use "gpg2 --import-ownertrust" to restore them)
 4275279C9512E14BDD14098A36FF78B37005D3BE:6:
diff --git tests/home-setup/testuser/ownertrustdb.txt tests/home-setup/testuser/ownertrustdb.txt
index 20a1a3f..dea9e94 100644
--- tests/home-setup/testuser/ownertrustdb.txt
+++ tests/home-setup/testuser/ownertrustdb.txt
@@ -1,4 +1,4 @@
 # List of assigned trustvalues, created Fri 17 Jun 2016 02:44:59 AM EDT
-# (Use "gpg --import-ownertrust" to restore them)
+# (Use "gpg2 --import-ownertrust" to restore them)
 8A4B353B4CBA6F30625498BAE00B5EEEBA79B482:6:
 4275279C9512E14BDD14098A36FF78B37005D3BE:5:
diff --git tests/keytrans tests/keytrans
index 9ca4de4..3c93d1d 100755
--- tests/keytrans
+++ tests/keytrans
@@ -86,7 +86,7 @@ pinentry-program $TESTDIR/phony-pinentry-nopass
 EOF
 
 # generate a key
-gpg --batch --$(get_gpg_prng_arg) --gen-key <<EOF
+gpg2 --batch --$(get_gpg_prng_arg) --gen-key <<EOF
 Key-Type: RSA
 Key-Length: 3072
 Key-Usage: sign
@@ -101,15 +101,15 @@ EOF
 
 echo "##################################################"
 echo "### retrieving key timestamp..."
-timestamp=$(gpg --list-key --with-colons | \
+timestamp=$(gpg2 --list-key --with-colons | \
     grep ^pub: | cut -d: -f6)
 
 echo "##################################################"
 echo "### exporting key to ssh file..."
-gpg --export-secret-keys | openpgp2ssh > \
+gpg2 --export-secret-keys | openpgp2ssh > \
     "$TEMPDIR"/test.pem
 
-gpg --export-secret-keys > "$TEMPDIR"/secret.key
+gpg2 --export-secret-keys > "$TEMPDIR"/secret.key
 
 PEM2OPENPGP_USAGE_FLAGS=sign,certify \
 PEM2OPENPGP_TIMESTAMP="$timestamp" pem2openpgp testtest \
@@ -118,22 +118,22 @@ PEM2OPENPGP_TIMESTAMP="$timestamp" pem2openpgp testtest \
 echo "##################################################"
 echo "### reconvert key, and compare to key in gpg keyring..."
 diff -u \
-    <(gpg --list-packets < "$TEMPDIR"/secret.key) \
-    <(gpg --list-packets < "$TEMPDIR"/converted.secret.key)
+    <(gpg2 --list-packets < "$TEMPDIR"/secret.key) \
+    <(gpg2 --list-packets < "$TEMPDIR"/converted.secret.key)
 
 diff -u \
     <(hd "$TEMPDIR"/secret.key) \
     <(hd "$TEMPDIR"/converted.secret.key)
 
-KEYFPR=$(gpg --fingerprint --with-colons --list-keys | awk -F: '/^fpr:/{ if (ok) { print $10 } ; ok=0 } /^pub:/{ ok=1 }')
+KEYFPR=$(gpg2 --fingerprint --with-colons --list-keys | awk -F: '/^fpr:/{ if (ok) { print $10 } ; ok=0 } /^pub:/{ ok=1 }')
 KEYID=$(printf "%s" "$KEYFPR" | cut -b25-40)
 
 echo "conversions look good!"
 
 echo "Now working with key $KEYID at time $timestamp"
 
-gpg --check-trustdb
-gpg --list-keys
+gpg2 --check-trustdb
+gpg2 --list-keys
 
 
 echo "##################################################"
@@ -145,12 +145,12 @@ PEM2OPENPGP_USAGE_FLAGS=authenticate,certify \
 PEM2OPENPGP_TIMESTAMP="$(( $timestamp + 1 ))" pem2openpgp fubar \
  < "$TEMPDIR"/newkey > "$TEMPDIR"/newkey.gpg
 
-NEWKEYFPR=$(< "$TEMPDIR"/newkey.gpg gpg --with-colons --import-options import-show --dry-run --import | awk -F: '/^fpr:/{ print $10 }' )
+NEWKEYFPR=$(< "$TEMPDIR"/newkey.gpg2 gpg --with-colons --import-options import-show --dry-run --import | awk -F: '/^fpr:/{ print $10 }' )
 NEWKEYID=$( printf "%s" "$NEWKEYFPR" | cut -b25-40)
 
-< "$TEMPDIR"/newkey.gpg gpg --import 
+< "$TEMPDIR"/newkey.gpg2 gpg --import
 
-gpg --batch --no-tty --faked-system-time "$timestamp" --quick-add-uid "$KEYID" baz
+gpg2 --batch --no-tty --faked-system-time "$timestamp" --quick-add-uid "$KEYID" baz
 
 cat >"$TEMPDIR"/expectedout <<EOF
 pub:u:3072:1:$KEYID:$timestamp:::u:::scSC
@@ -164,7 +164,7 @@ sig:!::1:$NEWKEYID:$(($timestamp + 1))::::fubar:13x::$NEWKEYFPR:::8
 EOF
 
 echo "test: diff expected gpg list output"
-diff -u "$TEMPDIR"/expectedout <(gpg --check-sigs --with-colons | grep -vE '^(tru|fpr):' | cut -d: -f1-16 | sed 's/:*$//')
+diff -u "$TEMPDIR"/expectedout <(gpg2 --check-sigs --with-colons | grep -vE '^(tru|fpr):' | cut -d: -f1-16 | sed 's/:*$//')
 
 ## FIXME: addtest: not testing subkeys at the moment.
 
